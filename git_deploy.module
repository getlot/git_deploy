<?php
// $Id$

/**
 * @file
 *
 * This module provides metadata about modules installed via git for
 * Drupal's updates listing. As it is intended to provide the same
 * functionality as cvs_deploy but for git modules, this module is modeled
 * after cvs_deploy which is written by Derek Wright ("dww")
 * http://drupal.org/user/46549.
 *
 * The intention of this module is to support the commit tagging
 * styles displayed at http://git.drupalcode.org/, which is a picture
 * of what drupal modules will look like after conversion to git. This
 * tagging convention is incompatible with the CVS tagging convention.
 */

function _git_deploy_load_glip() {
  // Faster to see if Git is defined and return then to use include_once.
  if (class_exists('Git')) {
    return TRUE;
  }
  // Git class will only load once from glip.php even if included many times.
  if (@include('glip/lib/glip.php')) {
    return TRUE;
  }
  else {
    watchdog('git_deploy', "Couldn't find Glip libraries, no git information can be retrieved.", array(), WATCHDOG_ERROR);
  }
}

/**
 * Implement hook_system_info_alter() to provide metadata to drupal
 *   from git.
 *
 * We support populating $info['version'] and $info['project'], as
 * cvs_deploy does.
 *
 * @param $info
 *   The module/theme info array we're altering.
 * @param $file
 *   An object describing the filesystem location of the module/theme.
 * @param $type
 *   Ignored. D7 has this, D6 doesn't. Is set to either 'module' or 'theme'.
 */
function git_deploy_system_info_alter(&$info, $file) {
  $module_dir = dirname($file->filename);
  $git_dir = $module_dir . DIRECTORY_SEPARATOR . '.git';

  // Skip this item if version and project are already set.
  if (!empty($info['version'])
    && !empty($info['project'])) {
    return;
  }

  // Skip this item if it has no .git directory
  if (!file_exists($git_dir)) {
    return;
  }

  // We don't have our support libraries.
  if (!_git_deploy_load_glip()) {
    return;
  }

  // Get the project name
  if (empty($info['project'])) {
    $info['project'] = git_deploy_get_project_name($git_dir);
  }

  // Get the correct version for this project
  if (empty($info['version'])) {
    $info['version'] = '';
  }
  _git_deploy_version_alter($info['version'], $git_dir, $file);
}

/**
 * Private helper to alter the version of a module based on what we can figure
 * out about the Git tag.
 *
 * @param  $version
 *   The version to be altered, passed by reference
 * @param  $git_dir
 *   The location if the .git directory.
 */
function _git_deploy_version_alter(&$version, $git_dir, $file) {
  static $available;

  $git_hash = git_deploy_hash_find($git_dir, 'HEAD');

  $head_contents = file_get_contents($git_dir . DIRECTORY_SEPARATOR . 'HEAD');

  // Call git_deploy_refs_find with array set to heads if ref: found
  if (strpos($head_contents, ':') == 3) {
      $git_refs = git_deploy_refs_find($git_dir, $git_hash, array('heads'));
  }
  else {
    // Call git_deploy_refs_find with array set to tags if ref: not found
    $git_refs = git_deploy_refs_find($git_dir, $git_hash, array('tags'));
  }

  if (count($git_refs)) {
    foreach ($git_refs as $git_ref) {
      $ref_components = explode('/', $git_ref, 3);
      if (count($ref_components) == 3) {
        $git_tag = $ref_components[2];
        break;
      }
    }
  }

  if (!empty($git_tag)) {
    $version = $git_tag;
  }

  if (module_exists('update') && $version == 'master') {
    module_load_include('inc', 'update', 'update.compare');
    // If there's available update_status data, we can use the version string
    // the release node pointing to HEAD really has. However, we can only
    // safely grab this data directly from the cache, since if we call
    // update_get_available() here, we'd enter infinite recursion when that
    // function invokes update_get_projects(), which in turn needs to process
    // the .info files, which invokes the hook that leads here.
    if (empty($available)) {
      $cache = _update_cache_get('update_available_releases');
      $available = $cache->data;
    }
    $project = update_get_project_name($file);
    if (isset($available[$project]['releases'])) {
      foreach ($available[$project]['releases'] as $release) {
        if (isset($release['tag']) && $release['tag'] == 'HEAD') {
          $version = $release['version'];
          break;
        }
      }
    }
  }
}

/**
 * Helper function to get the project associated with a Git directory.
 *
 * @param  $git_dir
 *   The location if the .git directory.
 * @return
 *   The name of the project.
 */
function git_deploy_get_project_name($git_dir) {
  $git_config_file = $git_dir . DIRECTORY_SEPARATOR . 'config';

  if (file_exists($git_config_file)) {
    $git_config = file_get_contents($git_config_file);
    if (preg_match(';^\s*url\s*=\s*.*?([^/.]+?)(\.git)?\s*$;m', $git_config, $matches)) {
      $project = $matches[1];
    }
  }
  if (!empty($project)) {
    return $project;
  }
  else {
    return '';
  }
}

/**
 * Turn a git ref into a git commit hash.
 *
 * @param $git_dir
 *   The path to the .git/ directory
 * @param $ref
 *   The ref to parse
 * @return
 *   NULL on error or the referenced hash.
 */
function git_deploy_hash_find($git_dir, $ref) {
  /* check if we have the hash */
  if (strpos($ref, ':') === FALSE) {
    if (strlen($ref) == 40) {
      return $ref;
    }

    // Check for refs like HEAD
    if (file_exists($git_dir . DIRECTORY_SEPARATOR . $ref)) {
      return git_deploy_hash_find($git_dir, trim(file_get_contents($git_dir . DIRECTORY_SEPARATOR . $ref)));
    }
  }

  list($type, $name) = explode(':', $ref, 2);
  $name = trim($name);

  switch ($type) {
    case 'ref':
      return git_deploy_hash_find($git_dir, trim(file_get_contents($git_dir . DIRECTORY_SEPARATOR . $name)));
  }

  return NULL;
}

/**
 * Map a GIT commit hash onto a ref.
 *
 * @param $git_dir
 *   The path to the .git/ diretory.
 * @param $hash
 *   The hash whose ref to find.
 * @param $types
 *   The types of ref to find. For example: array('tags'), array('heads'), or array('heads', 'tags')
 *
 * @return
 *   An array of the fully-qualified refs. For example: array('refs/tags/6.x-2.1');
 */
function git_deploy_refs_find($git_dir, $hash, $types = NULL) {
  $fetch_all_types = FALSE;
  $refs = array();
  $refs_dir = $git_dir . DIRECTORY_SEPARATOR . 'refs';
  $hash = trim($hash);
  if (empty($types)) {
    $types = scandir($refs_dir);
    $fetch_all_types = TRUE;
  }
  foreach ($types as $subdir) {
    $type = $subdir;
    $subdir = $refs_dir . DIRECTORY_SEPARATOR . $subdir;
    if (!is_dir($subdir)) {
      continue;
    }

    foreach (scandir($subdir) as $ref) {
      if ($ref == '.' or $ref == '..') {
        continue;
      }
      $ref_hash = trim(file_get_contents($subdir . DIRECTORY_SEPARATOR . $ref));
      if ($ref_hash == $hash) {
        // Reconstruct fully-qualified ref
        $refs[] = 'refs/' . $type . '/' . $ref;
      }
    }
  }
  $git_packed_refs_file = $git_dir . DIRECTORY_SEPARATOR . 'packed-refs';
  if (file_exists($git_packed_refs_file)) {
    $packed_refs = explode("\n", file_get_contents($git_packed_refs_file));
    foreach ($packed_refs as $packed_ref) {
      $packed_ref = trim($packed_ref);
      if (empty($packed_ref) || $packed_ref[0] == '#') {
        continue;
      }
      list($packed_hash, $ref) = explode(' ', $packed_ref, 2);
      if (trim($packed_hash) != $hash) {
        continue;
      }

      // If $types was set by the caller, ensure that we only unpack the right
      // types of refs.
      if (!$fetch_all_types) {
        $ref_components = explode('/', $ref);
        if (count($ref_components > 1)
          && !in_array($ref_components[1], $types)) {
          continue;
        }
      }
      $refs[] = $ref;
    }
  }

  return $refs;
}

